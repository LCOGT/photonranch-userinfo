org: photonadmin
app: photonranch

service: photonranch-userinfo

package:
  patterns:
    - '!venv/**'
    - '!node_modules/**'

plugins:
  - serverless-python-requirements
  - serverless-dynamodb-pitr
  - serverless-domain-manager

custom:

  userInfoTable: userinfo-${self:custom.stage.${self:provider.stage}}

  # Enable point-in-time-recovery
  pitr:
    - tableName: ${self:custom.userInfoTable}
      enabled: true

  # This is the 'variable' for the customDomain.basePath value, based on the stage.
  # Run as `sls deploy --stage <stage_name>`
  stage:
    prod: prod
    dev: dev
    test: test 

  # Since lambda runs on a linux instance, we need to zip the requirements in a linux docker container.
  pythonRequirements:
    dockerizePip: non-linux
    useDownloadCache: false 
    useStaticCache: false

  customDomain:
    domainName: 'userinfo.photonranch.org'
    basePath: ${self:custom.stage.${self:provider.stage}}
    stage: ${self:provider.stage}
    createRoute53Record: true

provider:
  name: aws
  stage: ${opt:stage, "test"}
  runtime: python3.9
  region: us-east-1
  environment: 
    USER_INFO_TABLE: ${self:custom.userInfoTable}
    # might need to add something else here for auth purposes
    STAGE: ${self:provider.stage}
  iam:
    role:
      statements:
      - Effect: Allow 
        Action: 
          - "dynamodb:PutItem"
          - "dynamodb:GetItem"
          - "dynamodb:UpdateItem"
          - "dynamodb:DeleteItem"
          - "dynamodb:Scan"
          - "dynamodb:Query"
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_INFO_TABLE}*"

resources: # CloudFormation template syntax from here on.
  Resources:

    # Configure API gateway "Gateway Responses" to work with CORS restrictions
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

    # Define the dynamodb table we use to store time allocation, other user info

    userInfoTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.userInfoTable}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: last_updated
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: last_updated
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  authorizerFunc: 
    handler: authorizer.auth
  getUserInfo:
    handler: handler.user_info_handler
    events:
      - http:
          path: user-info
          method: post
          #authorizer: none needed, just retrieving info
          cors: true
  addTime:
    handler: handler.add_time
    events:
      - http:
          path: add-time
          method: post
          #authorizer:
            #name: authorizerFunc
            #resultTtlInSeconds: 0 # Don't cache the policy or other tasks will fail!
          cors: true
  deductTime:
    handler: handler.deduct_time
    events:
      - http:
          path: deduct-time
          method: post
          #authorizer:
            #name: authorizerFunc
            #resultTtlInSeconds: 0 # Don't cache the policy or other tasks will fail!
          cors: true